import React, { useState } from 'react';
import moment from 'moment';

const TripPlannerPage = () => {
  const [destination, setDestination] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [selectedActivities, setSelectedActivities] = useState([]);
  const [generatedPlan, setGeneratedPlan] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);

  // Popular destinations
  const popularDestinations = [
    '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
    '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
    '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï',
    '‡∏û‡∏±‡∏ó‡∏¢‡∏≤',
    '‡∏´‡∏±‡∏ß‡∏´‡∏¥‡∏ô',
    '‡πÄ‡∏Å‡∏≤‡∏∞‡∏ä‡πâ‡∏≤‡∏á',
    '‡πÄ‡∏Å‡∏≤‡∏∞‡∏™‡∏°‡∏∏‡∏¢',
    '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà'
  ];

  // Activities options
  const activities = [
    { id: 'nature', label: '‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥', emoji: 'üèû', color: 'bg-green-100 text-green-800' },
    { id: 'city', label: '‡πÄ‡∏°‡∏∑‡∏≠‡∏á', emoji: 'üèô', color: 'bg-blue-100 text-blue-800' },
    { id: 'museum', label: '‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå', emoji: 'üé®', color: 'bg-purple-100 text-purple-800' },
    { id: 'shopping', label: '‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á', emoji: 'üõç', color: 'bg-pink-100 text-pink-800' },
    { id: 'food', label: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£', emoji: 'üçú', color: 'bg-orange-100 text-orange-800' }
  ];

  // Mock trip plans data
  const mockPlans = {
    '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£': {
      nature: [
        { day: 1, activities: ['‡πÄ‡∏î‡∏¥‡∏ô‡∏ä‡∏°‡∏™‡∏ß‡∏ô‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ', '‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤', '‡∏ä‡∏°‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ï‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡πÇ‡∏®‡∏Å‡∏≤'] },
        { day: 2, activities: ['‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏Å‡∏≤‡∏∞‡πÄ‡∏Å‡∏£‡πá‡∏î', '‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≥', '‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡∏á‡∏¢‡∏≤‡∏ß'] }
      ],
      city: [
        { day: 1, activities: ['‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß', '‡∏ä‡∏°‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á', '‡πÄ‡∏î‡∏¥‡∏ô‡∏¢‡πà‡∏≤‡∏ô‡∏ñ‡∏ô‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏≤‡∏£'] },
        { day: 2, activities: ['‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß ICONSIAM', '‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏∂‡∏Å Mahanakhon SkyWalk', '‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏£‡∏ñ‡πÑ‡∏ü‡∏£‡∏±‡∏ä‡∏î‡∏≤'] }
      ],
      museum: [
        { day: 1, activities: ['‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏™‡∏¢‡∏≤‡∏°', '‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏∑‡∏≠‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏û‡∏¥‡∏ò‡∏µ', '‡∏´‡∏≠‡∏®‡∏¥‡∏•‡∏õ‡πå‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û'] },
        { day: 2, activities: ['‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢', '‡∏ö‡πâ‡∏≤‡∏ô‡∏à‡∏¥‡∏° ‡∏ó‡∏≠‡∏°‡∏õ‡πå‡∏™‡∏±‡∏ô', '‡∏´‡∏≠‡∏®‡∏¥‡∏•‡∏õ‡πå‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£'] }
      ],
      shopping: [
        { day: 1, activities: ['‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡∏ó‡∏µ‡πà Siam Paragon', '‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£', '‡∏ä‡∏° Terminal 21'] },
        { day: 2, activities: ['‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß CentralWorld', '‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏≠‡∏±‡∏°‡∏û‡∏ß‡∏≤', 'Asiatique The Riverfront'] }
      ],
      food: [
        { day: 1, activities: ['‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏à‡πä‡πÑ‡∏ù ‡∏™‡πâ‡∏°‡∏ï‡∏≥', '‡∏•‡∏¥‡πâ‡∏°‡∏•‡∏≠‡∏á‡∏Ç‡∏ô‡∏°‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏•‡∏≤‡∏î‡∏ß‡∏≤‡πÇ‡∏£', '‡∏î‡∏∑‡πà‡∏°‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà Chatuchak'] },
        { day: 2, activities: ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡∏£‡∏ñ‡πÑ‡∏ü', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡πà‡∏≤‡∏ô‡πÄ‡∏¢‡∏≤‡∏ß‡∏£‡∏≤‡∏ä', '‡∏î‡∏¥‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏£‡∏¥‡∏°‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤'] }
      ]
    },
    '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà': {
      nature: [
        { day: 1, activities: ['‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û', '‡πÄ‡∏î‡∏¥‡∏ô‡∏õ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏≠‡∏¢‡∏≠‡∏¥‡∏ô‡∏ó‡∏ô‡∏ô‡∏ó‡πå', '‡∏ä‡∏°‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ï‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏≠‡∏¢‡∏Ñ‡∏≥'] },
        { day: 2, activities: ['‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏Å‡πà‡∏á‡πÅ‡∏°‡πà‡∏õ‡∏¥‡∏á', '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ï‡∏•‡∏≤‡∏î‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡∏¢‡∏∞'] }
      ],
      city: [
        { day: 1, activities: ['‡πÄ‡∏î‡∏¥‡∏ô‡∏¢‡πà‡∏≤‡∏ô‡∏ô‡∏¥‡∏°‡∏°‡∏≤‡∏ô‡πÄ‡∏´‡∏°‡∏¥‡∏ô‡∏ó‡πå', '‡∏ä‡∏°‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏™‡∏¥‡∏á‡∏´‡πå', '‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤'] },
        { day: 2, activities: ['‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß Maya Lifestyle Shopping Center', '‡∏ä‡∏°‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ó‡πà‡∏≤‡πÅ‡∏û', '‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏∞‡∏û‡∏≤‡∏ô‡∏ô‡∏ß‡∏£‡∏±‡∏ï‡∏ô‡πå'] }
      ],
      museum: [
        { day: 1, activities: ['‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏ö‡πâ‡∏≤‡∏ô‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤', '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà'] },
        { day: 2, activities: ['‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤', '‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏™‡∏ô‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡πÅ‡∏™‡∏ô‡∏á‡∏≤‡∏°', '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏®‡∏¥‡∏•‡∏õ‡∏Å‡∏£‡∏£‡∏°'] }
      ],
      shopping: [
        { day: 1, activities: ['‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏ß‡∏ô‡∏î‡∏≠‡∏Å', '‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏ß‡πÇ‡∏£‡∏£‡∏™', '‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ù‡∏≤‡∏Å‡∏¢‡πà‡∏≤‡∏ô‡∏ó‡πà‡∏≤‡πÅ‡∏û'] },
        { day: 2, activities: ['‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô', 'Central Festival Chiang Mai', '‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏•‡∏∂‡∏Å‡∏ö‡∏ô‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û'] }
      ],
      food: [
        { day: 1, activities: ['‡∏•‡∏¥‡πâ‡∏°‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏Å‡∏¥‡∏ô‡πÅ‡∏Å‡∏á‡∏Æ‡∏±‡∏á‡πÄ‡∏•', '‡∏•‡∏≠‡∏á‡∏Ç‡∏ô‡∏°‡∏à‡∏µ‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏µ‡πâ‡∏¢‡∏ß'] },
        { day: 2, activities: ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏•‡∏≤‡∏î‡∏ò‡∏ô‡∏¥‡∏ô', '‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÅ‡∏Å‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', '‡∏î‡∏¥‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà riverside restaurant'] }
      ]
    }
  };

  const handleActivityToggle = (activityId) => {
    setSelectedActivities(prev => 
      prev.includes(activityId) 
        ? prev.filter(id => id !== activityId)
        : [...prev, activityId]
    );
  };

  const generateTripPlan = () => {
    setIsGenerating(true);
    
    setTimeout(() => {
      const destinationPlans = mockPlans[destination] || mockPlans['‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£'];
      const selectedPlans = selectedActivities.length > 0 
        ? selectedActivities.flatMap(activity => destinationPlans[activity] || [])
        : Object.values(destinationPlans).flat();

      // Combine and organize by day
      const dayPlans = {};
      selectedPlans.forEach(plan => {
        if (!dayPlans[plan.day]) {
          dayPlans[plan.day] = [];
        }
        dayPlans[plan.day].push(...plan.activities);
      });

      // Remove duplicates and limit activities per day
      Object.keys(dayPlans).forEach(day => {
        dayPlans[day] = [...new Set(dayPlans[day])].slice(0, 3);
      });

      setGeneratedPlan({
        destination,
        startDate,
        endDate,
        activities: selectedActivities,
        dailyPlans: dayPlans
      });
      setIsGenerating(false);
    }, 1500);
  };

  const copyPlanLink = () => {
    const planData = encodeURIComponent(JSON.stringify({
      destination,
      startDate,
      endDate,
      activities: selectedActivities
    }));
    const link = `${window.location.origin}${window.location.pathname}?plan=${planData}`;
    navigator.clipboard.writeText(link);
    alert('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡πâ‡∏ß!');
  };

  const downloadPDF = () => {
    // Simple implementation - in real app would use PDF library
    const content = `
‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß ${destination}
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${moment(startDate).format('DD/MM/YYYY')} - ${moment(endDate).format('DD/MM/YYYY')}

${Object.entries(generatedPlan?.dailyPlans || {}).map(([day, activities]) => 
  `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${day}: ${activities.join(', ')}`
).join('\n')}
    `;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß-${destination}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8 px-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">
            ‚úàÔ∏è ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß
          </h1>
          <p className="text-gray-600 text-lg">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÉ‡∏ô‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ</p>
        </div>

        {/* Planning Form */}
        <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
          {/* Destination Selection */}
          <div className="mb-8">
            <label className="block text-lg font-semibold text-gray-700 mb-4">
              üìç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
            </label>
            <input
              type="text"
              value={destination}
              onChange={(e) => setDestination(e.target.value)}
              placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î..."
              className="w-full p-4 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none text-lg mb-4"
            />
            <div className="flex flex-wrap gap-2">
              {popularDestinations.map((place) => (
                <button
                  key={place}
                  onClick={() => setDestination(place)}
                  className="px-4 py-2 bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200 transition-colors"
                >
                  {place}
                </button>
              ))}
            </div>
          </div>

          {/* Date Selection */}
          <div className="mb-8">
            <label className="block text-lg font-semibold text-gray-700 mb-4">
              üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
            </label>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm text-gray-600 mb-2">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ</label>
                <input
                  type="date"
                  value={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                  className="w-full p-4 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none"
                />
              </div>
              <div>
                <label className="block text-sm text-gray-600 mb-2">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö</label>
                <input
                  type="date"
                  value={endDate}
                  onChange={(e) => setEndDate(e.target.value)}
                  className="w-full p-4 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none"
                />
              </div>
            </div>
          </div>

          {/* Activity Selection */}
          <div className="mb-8">
            <label className="block text-lg font-semibold text-gray-700 mb-4">
              üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à
            </label>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {activities.map((activity) => (
                <label
                  key={activity.id}
                  className={`flex items-center p-4 rounded-xl border-2 cursor-pointer transition-all ${
                    selectedActivities.includes(activity.id)
                      ? `${activity.color} border-current`
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <input
                    type="checkbox"
                    checked={selectedActivities.includes(activity.id)}
                    onChange={() => handleActivityToggle(activity.id)}
                    className="sr-only"
                  />
                  <span className="text-2xl mr-3">{activity.emoji}</span>
                  <span className="font-medium">{activity.label}</span>
                </label>
              ))}
            </div>
          </div>

          {/* Generate Button */}
          <div className="text-center">
            <button
              onClick={generateTripPlan}
              disabled={!destination || !startDate || !endDate || isGenerating}
              className="px-8 py-4 bg-blue-600 text-white text-lg font-semibold rounded-xl hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
            >
              {isGenerating ? 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô...' : '‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß'}
            </button>
          </div>
        </div>

        {/* Generated Plan */}
        {generatedPlan && (
          <div className="bg-white rounded-2xl shadow-xl p-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-gray-800">
                üìã ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß {generatedPlan.destination}
              </h2>
              <div className="flex gap-3">
                <button
                  onClick={copyPlanLink}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                >
                  üîó ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå
                </button>
                <button
                  onClick={downloadPDF}
                  className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                >
                  üìÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
                </button>
              </div>
            </div>

            <div className="mb-6 p-4 bg-gray-50 rounded-xl">
              <p className="text-gray-700">
                <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> {moment(generatedPlan.startDate).format('DD/MM/YYYY')} - {moment(generatedPlan.endDate).format('DD/MM/YYYY')}
              </p>
              <p className="text-gray-700 mt-1">
                <strong>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:</strong> {moment(generatedPlan.endDate).diff(moment(generatedPlan.startDate), 'days') + 1} ‡∏ß‡∏±‡∏ô
              </p>
            </div>

            <div className="space-y-6">
              {Object.entries(generatedPlan.dailyPlans).map(([day, dayActivities]) => (
                <div key={day} className="border-l-4 border-blue-500 pl-6">
                  <h3 className="text-xl font-semibold text-gray-800 mb-3">
                    ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {day}
                  </h3>
                  <ul className="space-y-2">
                    {dayActivities.map((activity, index) => (
                      <li key={index} className="flex items-center text-gray-700">
                        <span className="w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-medium mr-3">
                          {index + 1}
                        </span>
                        {activity}
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>

            {Object.keys(generatedPlan.dailyPlans).length === 0 && (
              <div className="text-center py-8 text-gray-500">
                <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
                <p className="text-sm mt-2">‡∏•‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô</p>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default TripPlannerPage; 