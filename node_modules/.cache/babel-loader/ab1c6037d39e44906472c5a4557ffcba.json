{"ast":null,"code":"var _jsxFileName = \"/Users/nack/yoga-booking-app/src/contexts/BookingContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { getBookingsForDate, getAvailableSlotsForDate, createBooking, cancelBooking as cancelBookingService, getPackages } from '../services/bookingService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookingContext = /*#__PURE__*/createContext();\nexport const useBooking = () => {\n  _s();\n  const context = useContext(BookingContext);\n  if (!context) {\n    throw new Error('useBooking must be used within a BookingProvider');\n  }\n  return context;\n};\n_s(useBooking, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const BookingProvider = ({\n  children\n}) => {\n  _s2();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n  const [availableSlots, setAvailableSlots] = useState([]);\n  const [bookings, setBookings] = useState([]);\n  const [packages, setPackages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load available slots when date changes\n  useEffect(() => {\n    loadAvailableSlots();\n  }, [selectedDate]);\n\n  // Load packages on component mount\n  useEffect(() => {\n    loadPackages();\n  }, []);\n  const loadAvailableSlots = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const slots = await getAvailableSlotsForDate(selectedDate);\n      setAvailableSlots(slots);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadBookingsForDate = async (date = selectedDate) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const dateBookings = await getBookingsForDate(date);\n      setBookings(dateBookings);\n      return dateBookings;\n    } catch (err) {\n      setError(err.message);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadPackages = async () => {\n    try {\n      const packagesList = await getPackages();\n      setPackages(packagesList);\n    } catch (err) {\n      console.error('Error loading packages:', err);\n    }\n  };\n  const bookClass = async bookingData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const bookingId = await createBooking({\n        ...bookingData,\n        date: selectedDate,\n        timeSlot: selectedTimeSlot\n      });\n\n      // Refresh available slots\n      await loadAvailableSlots();\n      return bookingId;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const cancelBooking = async bookingId => {\n    try {\n      setLoading(true);\n      setError(null);\n      await cancelBookingService(bookingId);\n\n      // Refresh available slots and bookings\n      await loadAvailableSlots();\n      await loadBookingsForDate();\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetBooking = () => {\n    setSelectedTimeSlot(null);\n    setError(null);\n  };\n  const value = {\n    // State\n    selectedDate,\n    selectedTimeSlot,\n    availableSlots,\n    bookings,\n    packages,\n    loading,\n    error,\n    // Actions\n    setSelectedDate,\n    setSelectedTimeSlot,\n    loadAvailableSlots,\n    loadBookingsForDate,\n    bookClass,\n    cancelBooking,\n    resetBooking,\n    setError\n  };\n  return /*#__PURE__*/_jsxDEV(BookingContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s2(BookingProvider, \"QqB3k1R5aNQoKtXouVL5Dms3vm0=\");\n_c = BookingProvider;\nvar _c;\n$RefreshReg$(_c, \"BookingProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","getBookingsForDate","getAvailableSlotsForDate","createBooking","cancelBooking","cancelBookingService","getPackages","jsxDEV","_jsxDEV","BookingContext","useBooking","_s","context","Error","BookingProvider","children","_s2","selectedDate","setSelectedDate","Date","selectedTimeSlot","setSelectedTimeSlot","availableSlots","setAvailableSlots","bookings","setBookings","packages","setPackages","loading","setLoading","error","setError","loadAvailableSlots","loadPackages","slots","err","message","loadBookingsForDate","date","dateBookings","packagesList","console","bookClass","bookingData","bookingId","timeSlot","resetBooking","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nack/yoga-booking-app/src/contexts/BookingContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { \n  getBookingsForDate, \n  getAvailableSlotsForDate, \n  createBooking,\n  cancelBooking as cancelBookingService,\n  getPackages\n} from '../services/bookingService';\n\nconst BookingContext = createContext();\n\nexport const useBooking = () => {\n  const context = useContext(BookingContext);\n  if (!context) {\n    throw new Error('useBooking must be used within a BookingProvider');\n  }\n  return context;\n};\n\nexport const BookingProvider = ({ children }) => {\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n  const [availableSlots, setAvailableSlots] = useState([]);\n  const [bookings, setBookings] = useState([]);\n  const [packages, setPackages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load available slots when date changes\n  useEffect(() => {\n    loadAvailableSlots();\n  }, [selectedDate]);\n\n  // Load packages on component mount\n  useEffect(() => {\n    loadPackages();\n  }, []);\n\n  const loadAvailableSlots = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const slots = await getAvailableSlotsForDate(selectedDate);\n      setAvailableSlots(slots);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadBookingsForDate = async (date = selectedDate) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const dateBookings = await getBookingsForDate(date);\n      setBookings(dateBookings);\n      return dateBookings;\n    } catch (err) {\n      setError(err.message);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadPackages = async () => {\n    try {\n      const packagesList = await getPackages();\n      setPackages(packagesList);\n    } catch (err) {\n      console.error('Error loading packages:', err);\n    }\n  };\n\n  const bookClass = async (bookingData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const bookingId = await createBooking({\n        ...bookingData,\n        date: selectedDate,\n        timeSlot: selectedTimeSlot,\n      });\n\n      // Refresh available slots\n      await loadAvailableSlots();\n      \n      return bookingId;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const cancelBooking = async (bookingId) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      await cancelBookingService(bookingId);\n      \n      // Refresh available slots and bookings\n      await loadAvailableSlots();\n      await loadBookingsForDate();\n      \n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetBooking = () => {\n    setSelectedTimeSlot(null);\n    setError(null);\n  };\n\n  const value = {\n    // State\n    selectedDate,\n    selectedTimeSlot,\n    availableSlots,\n    bookings,\n    packages,\n    loading,\n    error,\n    \n    // Actions\n    setSelectedDate,\n    setSelectedTimeSlot,\n    loadAvailableSlots,\n    loadBookingsForDate,\n    bookClass,\n    cancelBooking,\n    resetBooking,\n    setError\n  };\n\n  return (\n    <BookingContext.Provider value={value}>\n      {children}\n    </BookingContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}