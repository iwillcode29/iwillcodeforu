[{"/Users/nack/yoga-booking-app/src/index.js":"1","/Users/nack/yoga-booking-app/src/App.js":"2","/Users/nack/yoga-booking-app/src/contexts/AuthContext.js":"3","/Users/nack/yoga-booking-app/src/components/Header.js":"4","/Users/nack/yoga-booking-app/src/components/Login.js":"5","/Users/nack/yoga-booking-app/src/contexts/BookingContext.js":"6","/Users/nack/yoga-booking-app/src/pages/BookingPage.js":"7","/Users/nack/yoga-booking-app/src/pages/AdminDashboard.js":"8","/Users/nack/yoga-booking-app/src/i18n/index.js":"9","/Users/nack/yoga-booking-app/src/components/DatePicker.js":"10","/Users/nack/yoga-booking-app/src/components/TimeSlotSelector.js":"11","/Users/nack/yoga-booking-app/src/components/PaymentForm.js":"12","/Users/nack/yoga-booking-app/src/services/firebase.js":"13","/Users/nack/yoga-booking-app/src/services/bookingService.js":"14","/Users/nack/yoga-booking-app/src/pages/BubblePage.js":"15","/Users/nack/yoga-booking-app/src/pages/ExcuseGenerator.js":"16"},{"size":219,"mtime":1754146571275,"results":"17","hashOfConfig":"18"},{"size":2654,"mtime":1754270038148,"results":"19","hashOfConfig":"18"},{"size":1713,"mtime":1754147191991,"results":"20","hashOfConfig":"18"},{"size":5556,"mtime":1754147361772,"results":"21","hashOfConfig":"18"},{"size":2921,"mtime":1754144189868,"results":"22","hashOfConfig":"18"},{"size":3392,"mtime":1754144159832,"results":"23","hashOfConfig":"18"},{"size":2856,"mtime":1754146974869,"results":"24","hashOfConfig":"18"},{"size":9387,"mtime":1754144294244,"results":"25","hashOfConfig":"18"},{"size":6390,"mtime":1754144130570,"results":"26","hashOfConfig":"18"},{"size":1451,"mtime":1754144201083,"results":"27","hashOfConfig":"18"},{"size":2207,"mtime":1754144215273,"results":"28","hashOfConfig":"18"},{"size":7153,"mtime":1754144243075,"results":"29","hashOfConfig":"18"},{"size":706,"mtime":1754147191991,"results":"30","hashOfConfig":"18"},{"size":5123,"mtime":1754144098748,"results":"31","hashOfConfig":"18"},{"size":10287,"mtime":1754269814297,"results":"32","hashOfConfig":"18"},{"size":11585,"mtime":1754272458621,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"18b1guk",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nack/yoga-booking-app/src/index.js",[],["69","70"],"/Users/nack/yoga-booking-app/src/App.js",[],"/Users/nack/yoga-booking-app/src/contexts/AuthContext.js",[],"/Users/nack/yoga-booking-app/src/components/Header.js",[],"/Users/nack/yoga-booking-app/src/components/Login.js",[],"/Users/nack/yoga-booking-app/src/contexts/BookingContext.js",["71"],"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { \n  getBookingsForDate, \n  getAvailableSlotsForDate, \n  createBooking,\n  cancelBooking as cancelBookingService,\n  getPackages\n} from '../services/bookingService';\n\nconst BookingContext = createContext();\n\nexport const useBooking = () => {\n  const context = useContext(BookingContext);\n  if (!context) {\n    throw new Error('useBooking must be used within a BookingProvider');\n  }\n  return context;\n};\n\nexport const BookingProvider = ({ children }) => {\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n  const [availableSlots, setAvailableSlots] = useState([]);\n  const [bookings, setBookings] = useState([]);\n  const [packages, setPackages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load available slots when date changes\n  useEffect(() => {\n    loadAvailableSlots();\n  }, [selectedDate]);\n\n  // Load packages on component mount\n  useEffect(() => {\n    loadPackages();\n  }, []);\n\n  const loadAvailableSlots = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const slots = await getAvailableSlotsForDate(selectedDate);\n      setAvailableSlots(slots);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadBookingsForDate = async (date = selectedDate) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const dateBookings = await getBookingsForDate(date);\n      setBookings(dateBookings);\n      return dateBookings;\n    } catch (err) {\n      setError(err.message);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadPackages = async () => {\n    try {\n      const packagesList = await getPackages();\n      setPackages(packagesList);\n    } catch (err) {\n      console.error('Error loading packages:', err);\n    }\n  };\n\n  const bookClass = async (bookingData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const bookingId = await createBooking({\n        ...bookingData,\n        date: selectedDate,\n        timeSlot: selectedTimeSlot,\n      });\n\n      // Refresh available slots\n      await loadAvailableSlots();\n      \n      return bookingId;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const cancelBooking = async (bookingId) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      await cancelBookingService(bookingId);\n      \n      // Refresh available slots and bookings\n      await loadAvailableSlots();\n      await loadBookingsForDate();\n      \n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetBooking = () => {\n    setSelectedTimeSlot(null);\n    setError(null);\n  };\n\n  const value = {\n    // State\n    selectedDate,\n    selectedTimeSlot,\n    availableSlots,\n    bookings,\n    packages,\n    loading,\n    error,\n    \n    // Actions\n    setSelectedDate,\n    setSelectedTimeSlot,\n    loadAvailableSlots,\n    loadBookingsForDate,\n    bookClass,\n    cancelBooking,\n    resetBooking,\n    setError\n  };\n\n  return (\n    <BookingContext.Provider value={value}>\n      {children}\n    </BookingContext.Provider>\n  );\n};\n","/Users/nack/yoga-booking-app/src/pages/BookingPage.js",[],"/Users/nack/yoga-booking-app/src/pages/AdminDashboard.js",[],"/Users/nack/yoga-booking-app/src/i18n/index.js",[],"/Users/nack/yoga-booking-app/src/components/DatePicker.js",[],"/Users/nack/yoga-booking-app/src/components/TimeSlotSelector.js",[],"/Users/nack/yoga-booking-app/src/components/PaymentForm.js",[],"/Users/nack/yoga-booking-app/src/services/firebase.js",[],"/Users/nack/yoga-booking-app/src/services/bookingService.js",["72"],"import { \n  collection, \n  doc, \n  getDocs, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  query, \n  where, \n  orderBy,\n  Timestamp \n} from 'firebase/firestore';\nimport { db } from './firebase';\n\nexport const BOOKING_COLLECTION = 'bookings';\nexport const USERS_COLLECTION = 'users';\nexport const PACKAGES_COLLECTION = 'packages';\n\n// Time slots\nexport const TIME_SLOTS = [\n  { id: '09:00', time: '09:00', maxCapacity: 20 },\n  { id: '11:00', time: '11:00', maxCapacity: 20 }\n];\n\n// Get bookings for a specific date\nexport const getBookingsForDate = async (date) => {\n  try {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    \n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    const q = query(\n      collection(db, BOOKING_COLLECTION),\n      where('date', '>=', Timestamp.fromDate(startOfDay)),\n      where('date', '<=', Timestamp.fromDate(endOfDay)),\n      orderBy('date')\n    );\n\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data(),\n      date: doc.data().date.toDate()\n    }));\n  } catch (error) {\n    console.error('Error getting bookings:', error);\n    throw error;\n  }\n};\n\n// Create a new booking\nexport const createBooking = async (bookingData) => {\n  try {\n    const docRef = await addDoc(collection(db, BOOKING_COLLECTION), {\n      ...bookingData,\n      date: Timestamp.fromDate(bookingData.date),\n      createdAt: Timestamp.now(),\n      status: 'confirmed'\n    });\n    return docRef.id;\n  } catch (error) {\n    console.error('Error creating booking:', error);\n    throw error;\n  }\n};\n\n// Cancel booking\nexport const cancelBooking = async (bookingId) => {\n  try {\n    const bookingRef = doc(db, BOOKING_COLLECTION, bookingId);\n    await updateDoc(bookingRef, {\n      status: 'cancelled',\n      cancelledAt: Timestamp.now()\n    });\n  } catch (error) {\n    console.error('Error cancelling booking:', error);\n    throw error;\n  }\n};\n\n// Get available slots for a date\nexport const getAvailableSlotsForDate = async (date) => {\n  try {\n    const bookings = await getBookingsForDate(date);\n    \n    const slotCounts = {};\n    bookings.forEach(booking => {\n      if (booking.status === 'confirmed') {\n        const timeSlot = booking.timeSlot;\n        slotCounts[timeSlot] = (slotCounts[timeSlot] || 0) + 1;\n      }\n    });\n\n    return TIME_SLOTS.map(slot => ({\n      ...slot,\n      currentBookings: slotCounts[slot.id] || 0,\n      available: (slotCounts[slot.id] || 0) < slot.maxCapacity\n    }));\n  } catch (error) {\n    console.error('Error getting available slots:', error);\n    throw error;\n  }\n};\n\n// User management\nexport const createUser = async (userData) => {\n  try {\n    const docRef = await addDoc(collection(db, USERS_COLLECTION), {\n      ...userData,\n      createdAt: Timestamp.now(),\n      packages: []\n    });\n    return docRef.id;\n  } catch (error) {\n    console.error('Error creating user:', error);\n    throw error;\n  }\n};\n\n// Package management\nexport const getPackages = async () => {\n  try {\n    const querySnapshot = await getDocs(collection(db, PACKAGES_COLLECTION));\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Error getting packages:', error);\n    throw error;\n  }\n};\n\nexport const createPackage = async (packageData) => {\n  try {\n    const docRef = await addDoc(collection(db, PACKAGES_COLLECTION), {\n      ...packageData,\n      createdAt: Timestamp.now()\n    });\n    return docRef.id;\n  } catch (error) {\n    console.error('Error creating package:', error);\n    throw error;\n  }\n};\n\n// Admin functions\nexport const getAllBookings = async () => {\n  try {\n    const q = query(\n      collection(db, BOOKING_COLLECTION),\n      orderBy('date', 'desc')\n    );\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data(),\n      date: doc.data().date.toDate(),\n      createdAt: doc.data().createdAt.toDate()\n    }));\n  } catch (error) {\n    console.error('Error getting all bookings:', error);\n    throw error;\n  }\n};\n\nexport const getBookingStats = async () => {\n  try {\n    const bookings = await getAllBookings();\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const todayBookings = bookings.filter(booking => \n      booking.date >= today && \n      booking.date < new Date(today.getTime() + 24 * 60 * 60 * 1000) &&\n      booking.status === 'confirmed'\n    );\n\n    const thisMonth = bookings.filter(booking => \n      booking.date.getMonth() === today.getMonth() &&\n      booking.date.getFullYear() === today.getFullYear() &&\n      booking.status === 'confirmed'\n    );\n\n    return {\n      totalBookings: bookings.filter(b => b.status === 'confirmed').length,\n      todayBookings: todayBookings.length,\n      monthlyBookings: thisMonth.length,\n      totalRevenue: bookings\n        .filter(b => b.status === 'confirmed')\n        .reduce((sum, booking) => sum + (booking.amount || 0), 0)\n    };\n  } catch (error) {\n    console.error('Error getting booking stats:', error);\n    throw error;\n  }\n};\n","/Users/nack/yoga-booking-app/src/pages/BubblePage.js",[],"/Users/nack/yoga-booking-app/src/pages/ExcuseGenerator.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":32,"column":6,"nodeType":"79","endLine":32,"endColumn":20,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":7,"column":3,"nodeType":"83","messageId":"84","endLine":7,"endColumn":12},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadAvailableSlots'. Either include it or remove the dependency array.","ArrayExpression",["87"],"no-unused-vars","'deleteDoc' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},"Update the dependencies array to be: [loadAvailableSlots, selectedDate]",{"range":"90","text":"91"},[1015,1029],"[loadAvailableSlots, selectedDate]"]